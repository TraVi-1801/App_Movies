package com.vic.project.app_movies.screens.detailimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.animation.core.FastOutSlowInEasingimport androidx.compose.animation.core.LinearEasingimport androidx.compose.animation.core.RepeatModeimport androidx.compose.animation.core.animateFloatimport androidx.compose.animation.core.infiniteRepeatableimport androidx.compose.animation.core.rememberInfiniteTransitionimport androidx.compose.animation.core.tweenimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.aspectRatioimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.rotateimport androidx.compose.ui.geometry.Offsetimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.vic.project.app_movies.design_system.ImageShimmerimport com.vic.project.app_movies.utils.ModifierExtension.clickableSingleimport com.vic.project.app_movies.utils.isOnlineimport kotlinx.coroutines.flow.map@Composablefun DetailLoading(    isError: Boolean,    onRetry: () -> Unit) {    val context = LocalContext.current    val isOffline = isOnline(context).map(Boolean::not).collectAsStateWithLifecycle(        initialValue = false,    )    val infiniteTransition = rememberInfiniteTransition(label = "")    val rotateAnimation by infiniteTransition.animateFloat(        initialValue = 0f,        targetValue = 360f,        animationSpec = infiniteRepeatable(            animation = tween(                durationMillis = 360,                easing = LinearEasing            )        ), label = ""    )    val shimmerColors = listOf(        Color.White.copy(alpha = 0.6f),        Color.White.copy(alpha = 0.2f),        Color.White.copy(alpha = 0.6f),    )    val transition = rememberInfiniteTransition()    val translateAnim = transition.animateFloat(        initialValue = 0f,        targetValue = 1000f,        animationSpec = infiniteRepeatable(            animation = tween(                durationMillis = 1000,                easing = FastOutSlowInEasing            ),            repeatMode = RepeatMode.Reverse        )    )    val brush = Brush.linearGradient(        colors = shimmerColors,        start = Offset.Zero,        end = Offset(x = translateAnim.value, y = translateAnim.value)    )    Column (        modifier = Modifier.fillMaxSize()    ){        Box(            modifier = Modifier                .fillMaxWidth()                .fillMaxHeight(0.4f)                .background(Color.Gray.copy(0.5f),RoundedCornerShape(8.dp)),            contentAlignment = Alignment.Center        ) {            Spacer(                modifier = Modifier.fillMaxSize()                    .border(1.5.dp, brush, RoundedCornerShape(8.dp))            )            CircularProgressIndicator(                modifier = Modifier                    .size(32.dp)                    .rotate(rotateAnimation)                    .border(                        width = 2.dp,                        brush = Brush.sweepGradient(                            listOf(                                MaterialTheme.colorScheme.primary,                                MaterialTheme.colorScheme.secondaryContainer                            )                        ),                        shape = CircleShape                    ),                progress = 1f,                strokeWidth = 1.dp,                color = MaterialTheme.colorScheme.secondaryContainer            )        }        AnimatedVisibility(isError) {            Column (                modifier = Modifier.fillMaxWidth(),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.spacedBy(16.dp)            ){                Text(                    text = if (isOffline.value) "You arenâ€™t connected to the internet" else "An error occurred please again",                    style = MaterialTheme.typography.bodyLarge,                    fontWeight = FontWeight.W400,                    textAlign = TextAlign.Center,                    color = Color.White,                )                Text(                    text = "try again",                    style = MaterialTheme.typography.labelLarge,                    fontWeight = FontWeight.W500,                    textAlign = TextAlign.Center,                    color = Color.White,                    modifier = Modifier                        .background(Color.DarkGray, RoundedCornerShape(16.dp))                        .clickableSingle {                            onRetry.invoke()                        }                        .padding(16.dp)                )            }        }        Spacer(            modifier = Modifier                .padding(top = 20.dp)                .height(2.dp)                .fillMaxWidth(0.4f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 20.dp)                .height(2.dp)                .fillMaxWidth(0.3f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 20.dp)                .height(3.dp)                .fillMaxWidth(0.45f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 20.dp)                .height(3.dp)                .fillMaxWidth(0.45f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 40.dp)                .height(2.dp)                .fillMaxWidth(0.77f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 16.dp, )                .height(4.dp)                .fillMaxWidth(0.7f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 16.dp, )                .height(3.dp)                .fillMaxWidth(0.75f)                .background(brush, RoundedCornerShape(8.dp))        )        Spacer(            modifier = Modifier                .padding(top = 16.dp, )                .height(8.dp)                .fillMaxWidth(0.73f)                .background(brush, RoundedCornerShape(8.dp))        )    }}