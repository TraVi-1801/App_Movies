package com.vic.project.app_movies.screens.detailimport android.content.Intentimport android.net.Uriimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.PlayArrowimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport com.vic.project.app_movies.design_system.ImageLoadimport com.vic.project.app_movies.domain.model.MovieDetailimport com.vic.project.app_movies.utils.ModifierExtension.clickableSingleimport com.vic.project.app_movies.utils.StringUtils.orNullWithHolderimport androidx.core.net.toUri@Composablefun DetailContent(    data: MovieDetail?) {    val context = LocalContext.current    LazyColumn (        modifier = Modifier            .fillMaxSize(),        verticalArrangement = Arrangement.spacedBy(16.dp)    ){        item {            Box (                modifier = Modifier                    .fillMaxWidth()                    .height(400.dp)            ){                ImageLoad(                    url = data?.backdropPath.orEmpty(),                    modifier = Modifier                        .fillMaxSize(),                    contentScale = ContentScale.Crop,                    contentDescription = ""                )                Row (                    modifier = Modifier                        .fillMaxWidth()                        .align(Alignment.BottomCenter)                        .padding(horizontal = 16.dp, vertical = 12.dp),                    verticalAlignment = Alignment.Bottom,                    horizontalArrangement = Arrangement.spacedBy(12.dp)                ){                    ImageLoad(                        url = data?.posterUrl.orEmpty(),                        modifier = Modifier                            .fillMaxWidth(0.25f),                        contentScale = ContentScale.FillWidth,                        contentDescription = ""                    )                    Column (                        modifier = Modifier                            .weight(1f),                    ){                        Text(                            data?.title.orNullWithHolder(),                            style = MaterialTheme.typography.titleLarge,                            maxLines = 2,                            overflow = TextOverflow.Ellipsis,                            color = Color.White,                        )                        Text(                            data?.description.orNullWithHolder(),                            style = MaterialTheme.typography.titleMedium,                            maxLines = 2,                            overflow = TextOverflow.Ellipsis,                            color = Color.White,                        )                        data?.imdbId?.let {                            Row (                                modifier = Modifier                                    .background(Color.Red,RoundedCornerShape(8.dp))                                    .clickableSingle{                                        val intent = Intent(Intent.ACTION_VIEW, it.toUri())                                        context.startActivity(intent)                                    }                                    .padding(horizontal = 12.dp, vertical = 8.dp),                                verticalAlignment = Alignment.CenterVertically,                                horizontalArrangement = Arrangement.spacedBy(4.dp)                            ){                                Icon(                                    imageVector = Icons.Default.PlayArrow,                                    contentDescription = "",                                    tint = Color.White,                                    modifier = Modifier                                        .size(16.dp)                                        .clip(CircleShape)                                        .border(1.dp,Color.White,CircleShape)                                        .padding(2.dp)                                )                                Text(                                    "Watch now",                                    style = MaterialTheme.typography.labelMedium,                                    color = Color.White,                                )                            }                        }                    }                }            }        }        item {            Row (                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp),                verticalAlignment = Alignment.CenterVertically,                horizontalArrangement = Arrangement.SpaceBetween            ){                Text("(${data?.vote_average.orNullWithHolder()}/${data?.vote_count.orNullWithHolder()})",                    style = MaterialTheme.typography.titleMedium,                    color = Color.White,                    fontWeight = FontWeight.W400,                )                Text(                    buildAnnotatedString {                        withStyle(                            SpanStyle(                                fontWeight = FontWeight.W600                            )                        ) {                            append("Release date: ")                        }                        append(data?.releaseDate.orNullWithHolder())                    },                    style = MaterialTheme.typography.titleMedium,                    fontWeight = FontWeight.W400,                    color = Color.White,                )            }        }        item {            Text(                buildAnnotatedString {                    withStyle(                        SpanStyle(                            fontWeight = FontWeight.W600                        )                    ) {                        append("Runtime: ")                    }                    append(data?.runtime.orNullWithHolder())                },                style = MaterialTheme.typography.titleMedium,                fontWeight = FontWeight.W400,                color = Color.White,                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp)            )        }        item {            Text(                buildAnnotatedString {                    withStyle(                        SpanStyle(                            fontWeight = FontWeight.W600                        )                    ) {                        append("Genres: ")                    }                    append(data?.genres.orNullWithHolder())                },                style = MaterialTheme.typography.titleMedium,                fontWeight = FontWeight.W400,                color = Color.White,                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp)            )        }        item {            Column (                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp),            ){                Text(                    "Overview",                    style = MaterialTheme.typography.titleMedium,                    fontWeight = FontWeight.W600,                    color = Color.White,                )                Text(                    data?.overview.orNullWithHolder(),                    style = MaterialTheme.typography.titleSmall,                    fontWeight = FontWeight.W400,                    color = Color.White,                )            }        }        item {            Spacer(Modifier.height(16.dp))        }    }}