package com.vic.project.app_movies.screens.detailimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material3.Iconimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.unit.dpimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.vic.project.app_movies.Rimport com.vic.project.app_movies.presentation.viewmodel.HomeViewModelimport com.vic.project.app_movies.presentation.viewmodel.MovieDetailViewModelimport com.vic.project.app_movies.utils.ModifierExtension.clickableSingleimport org.koin.androidx.compose.koinViewModelimport org.koin.core.context.GlobalContext.get@Composablefun DetailScreen(    id: Int,    navigateBack: () -> Unit) {    val viewModel: MovieDetailViewModel = koinViewModel()    val uiState by viewModel.uiState.collectAsStateWithLifecycle()    LaunchedEffect(Unit) {        if (uiState.movie == null){            viewModel.loadMovie(id)        }    }    Box(        modifier = Modifier            .fillMaxSize()            .background(Color.Black),    ){        when{            uiState.errorMessage || uiState.isLoading -> DetailLoading(                isError = uiState.errorMessage,                onRetry = {                    viewModel.retry()                }            )            else -> DetailContent(uiState.movie)        }        Icon(            painter = painterResource(R.drawable.ic_arrow_left),            contentDescription = "",            tint = Color.White,            modifier = Modifier                .padding(16.dp)                .statusBarsPadding()                .size(36.dp)                .background(Color.Black.copy(0.7f), CircleShape)                .clickableSingle{                    navigateBack.invoke()                }                .padding(8.dp)        )    }}