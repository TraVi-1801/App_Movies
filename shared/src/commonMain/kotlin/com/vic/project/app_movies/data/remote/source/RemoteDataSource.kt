package com.vic.project.app_movies.data.remote.sourceimport com.vic.project.app_movies.data.remote.error.ApiExceptionimport com.vic.project.app_movies.utils.Dispatcherimport com.vic.project.app_movies.data.remote.service.MovieServiceimport com.vic.project.app_movies.utils.ResultWrapperimport kotlinx.coroutines.withContextinternal class RemoteDataSource(    private val apiService: MovieService,    private val dispatcher: Dispatcher) {    suspend fun getMovies(search: String) = withContext(dispatcher.io){        try {            val result = apiService.getMovies(search = search)            if (result.success != null && result.success.not()){                ResultWrapper.Error(result.status_message)            } else {                ResultWrapper.Success(result)            }        } catch (e: ApiException) {            when (e) {                is ApiException.NetworkUnavailable -> ResultWrapper.Error("No internet. Please check your connection.")                is ApiException.Timeout ->  ResultWrapper.Error("Request timed out. Try again later.")                is ApiException.HttpError ->  ResultWrapper.Error("Server error ${e.code}")                else ->  ResultWrapper.Error("Something went wrong. Try again.")            }        }    }    suspend fun getMoviesTrending() = withContext(dispatcher.io){        try {            val result = apiService.getMoviesTrending()            if (result.success != null && result.success.not()){                ResultWrapper.Error(result.status_message)            } else {                ResultWrapper.Success(result)            }        } catch (e: ApiException) {            when (e) {                is ApiException.NetworkUnavailable -> ResultWrapper.Error("No internet. Please check your connection.")                is ApiException.Timeout ->  ResultWrapper.Error("Request timed out. Try again later.")                is ApiException.HttpError ->  ResultWrapper.Error("Server error ${e.code}")                else ->  ResultWrapper.Error("Something went wrong. Try again.")            }        }    }    suspend fun getMovie(movieId: Int) = withContext(dispatcher.io){        try {            val result = apiService.getMovie(movieId = movieId)            if (result.success != null && result.success.not()){                ResultWrapper.Error(result.status_message)            } else {                ResultWrapper.Success(result)            }        } catch (e: ApiException) {            when (e) {                is ApiException.NetworkUnavailable -> ResultWrapper.Error("No internet. Please check your connection.")                is ApiException.Timeout ->  ResultWrapper.Error("Request timed out. Try again later.")                is ApiException.HttpError ->  ResultWrapper.Error("Server error ${e.code}")                else ->  ResultWrapper.Error("Something went wrong. Try again.")            }        }    }}