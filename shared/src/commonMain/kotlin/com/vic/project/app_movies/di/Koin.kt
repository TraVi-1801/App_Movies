package com.vic.project.app_movies.diimport com.vic.project.app_movies.utils.provideDispatcherimport com.vic.project.app_movies.data.remote.service.MovieServiceimport com.vic.project.app_movies.data.remote.source.RemoteDataSourceimport com.vic.project.app_movies.data.repository.MovieRepositoryImplimport com.vic.project.app_movies.domain.repository.MovieRepositoryimport com.vic.project.app_movies.domain.usecase.GetMovieDetailUseCaseimport com.vic.project.app_movies.domain.usecase.GetTrendingMoviesUseCaseimport com.vic.project.app_movies.domain.usecase.SearchMoviesUseCaseimport com.vic.project.app_movies.presentation.viewmodel.HomeViewModelimport com.vic.project.app_movies.presentation.viewmodel.MovieDetailViewModelimport com.vic.project.app_movies.utils.CurlLoggerimport com.vic.project.app_movies.utils.Logger as AppLoggerimport com.vic.project.app_movies.utils.getLoggerInstanceimport com.vic.project.app_movies.utils.isDebugimport io.ktor.client.HttpClientimport io.ktor.client.plugins.contentnegotiation.ContentNegotiationimport io.ktor.client.plugins.defaultRequestimport io.ktor.client.plugins.logging.LogLevelimport io.ktor.client.plugins.logging.Loggerimport io.ktor.client.plugins.logging.Loggingimport io.ktor.client.request.headerimport io.ktor.serialization.kotlinx.json.jsonimport kotlinx.serialization.json.Jsonimport org.koin.core.context.startKoinimport org.koin.core.module.Moduleimport org.koin.core.qualifier.namedimport org.koin.dsl.moduleprivate val dataModule = module {    single {        HttpClient {            defaultRequest {                header("Authorization", "Bearer API_KEY")            }            if (isDebug) {                install(CurlLogger)                install(Logging) {                    logger = object : Logger {                        override fun log(message: String) {                            println("MESSAGE: $message")                        }                    }                    level = LogLevel.ALL                }            }            install(ContentNegotiation) {                json(Json {                    ignoreUnknownKeys = true                    useAlternativeNames = false                })            }        }    }    factory { MovieService(get()) }    single { RemoteDataSource(get(), get()) }}private val utilityModule = module {    factory { provideDispatcher() }    single<AppLogger> {        getLoggerInstance()    }}private val domainModule = module {    single<MovieRepository> { MovieRepositoryImpl(get(), get(), get(), get()) }    factory { GetTrendingMoviesUseCase(get()) }    factory { SearchMoviesUseCase(get()) }    factory { GetMovieDetailUseCase(get()) }}private val viewModelModule = module {    factory { MovieDetailViewModel(get()) }    factory { HomeViewModel(get(),get()) }}fun initKoin(appModules: List<Module> = emptyList()) {    startKoin {        modules(            listOf(                dataModule,                domainModule,                utilityModule,                viewModelModule            ) + appModules        )    }}