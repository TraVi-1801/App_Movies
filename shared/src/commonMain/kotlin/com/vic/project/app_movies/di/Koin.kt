package com.vic.project.app_movies.diimport com.vic.project.app_movies.utils.provideDispatcherimport com.vic.project.app_movies.data.remote.service.MovieServiceimport com.vic.project.app_movies.data.remote.source.RemoteDataSourceimport com.vic.project.app_movies.data.repository.MovieRepositoryImplimport com.vic.project.app_movies.domain.repository.MovieRepositoryimport io.ktor.client.HttpClientimport io.ktor.client.plugins.contentnegotiation.ContentNegotiationimport io.ktor.client.plugins.defaultRequestimport io.ktor.client.request.headerimport io.ktor.serialization.kotlinx.json.jsonimport kotlinx.serialization.json.Jsonimport org.koin.core.context.startKoinimport org.koin.core.module.Moduleimport org.koin.core.qualifier.namedimport org.koin.dsl.moduleprivate val dataModule = module {    factory<String>(named("apiKey")) { "" }    single {        HttpClient {            defaultRequest {                header("Authorization", "Bearer ${get<String>(named("apiKey"))}")            }            install(ContentNegotiation) {                json(Json {                    ignoreUnknownKeys = true                    useAlternativeNames = false                })            }        }    }    single { MovieService(get()) }    single { RemoteDataSource(get(), get()) }}private val utilityModule = module {    factory { provideDispatcher() }}private val domainModule = module {    single<MovieRepository> { MovieRepositoryImpl(get()) }}fun initKoin(appModules: List<Module> = emptyList()) {    startKoin {        modules(            listOf(                dataModule,                domainModule,                utilityModule            ) + appModules        )    }}