package com.vic.project.app_movies.utilsimport kotlin.math.powimport kotlin.math.roundobject StringUtils {    private const val STRING_NULL_PLACEHOLDER = "-"    fun Any?.orNullWithHolder(): String {        this ?: return STRING_NULL_PLACEHOLDER        return this.toString()    }    fun Int?.formatLargeNumber(): String {        if (this == null) return STRING_NULL_PLACEHOLDER        return when {            this >= 1_000_000_000 -> formatSuffix(this, 1_000_000_000, "B")            this >= 100_000_000 -> formatSuffix(this, 1_000_000, "M", noDecimal = true)            this >= 1_000_000 -> formatSuffix(this, 1_000_000, "M")            this >= 1_000 -> formatSuffix(this, 1_000, "k")            else -> this.toString()        }    }    private fun formatSuffix(number: Int, divisor: Long, suffix: String, noDecimal: Boolean = false): String {        val value = number.toDouble() / divisor        return if (noDecimal && value % 1 == 0.0) {            "${value.toInt()}$suffix"        } else if (value % 1 == 0.0) {            "${value.toInt()}$suffix"        } else {            "${formatDoubleTrimTrailingZeros(value, 1)}$suffix"        }    }    private fun formatDoubleTrimTrailingZeros(value: Double, decimals: Int): String {        val factor = 10.0.pow(decimals)        val rounded = round(value * factor) / factor        val asString = rounded.toString()        return if (asString.endsWith(".0")) {            asString.dropLast(2)        } else {            asString        }    }    fun Double?.formatVoteAverage(): String {        if (this == null) return STRING_NULL_PLACEHOLDER        val rounded = round(this * 10) / 10        val str = rounded.toString()        return if (str.endsWith(".0")) str.dropLast(2) else str    }    fun String.maskToken(): String = replace(Regex("Bearer \\S+"), "Bearer ***")}