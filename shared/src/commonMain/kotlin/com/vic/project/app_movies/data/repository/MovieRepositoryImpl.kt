package com.vic.project.app_movies.data.repositoryimport com.vic.project.app_movies.data.mapper.toDomainModelimport com.vic.project.app_movies.utils.ResultWrapperimport com.vic.project.app_movies.data.remote.source.RemoteDataSourceimport com.vic.project.app_movies.domain.model.Movieimport com.vic.project.app_movies.domain.model.MovieDetailimport com.vic.project.app_movies.domain.repository.MovieRepositoryimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOnimport kotlinx.coroutines.flow.onStartinternal class MovieRepositoryImpl (    private val remoteDateSource: RemoteDataSource): MovieRepository {    override suspend fun getTrendingMovies(): Flow<ResultWrapper<List<Movie>>> {        return flow {            val response = remoteDateSource.getMoviesTrending().results.map { it.toDomainModel() }            emit(response)        }.onStart {            emit(ResultWrapper.Loading)        }.flowOn(ioDispatcher)    }    override suspend fun searchMovies(search: String): Flow<ResultWrapper<List<Movie>>> {        TODO("Not yet implemented")    }    override suspend fun getMovie(movieId: Int): Flow<ResultWrapper<MovieDetail>> {        TODO("Not yet implemented")    }}